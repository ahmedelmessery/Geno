from keras import layers
from keras.models import load_model
from django.shortcuts import render, redirect
from django.http import JsonResponse
import json
import requests
from keras.models import load_model
import re
import string
import tensorflow as tf


# Create your views here.


def detection(request):
    return render(request, 'detection.html')


Diseased_lst = ['CAGGAGGGAGAAACCATCATGCTGAGGTGCCACAGCTGGAAGGACAAGCCTCTGGTCAAGGTCACATTCTTCCAGAATGGAAAATCCCAGAAATTCTCCCCTTTGGATCCCACCTTCTCCATCCCACAAGCAAACCACAGTCACAGTGGTGATTACCACTGCACAGGAAACATAGGCTACACGCTGTTCTCATCCAAGCCT',
                'CAGGAGGGAGAAACCATCATGCTGAGGTGCCACAGCTGGAAGGACAAGCCTCTGGTCAAGGTCACATTCTTCCAGAATGGAAAATCCCAGAAATTCTCCCGTTTGGATCCCACCTTCTCCATCCCACAAGCAAACCACAGTCACAGTGGTGATTACCACTGCACAGGAAACATAGGCTACACGCTGTTCTCATCCAAGCCT',
                'TCCTCCGCAGGAAGAGTCTCCTCGCCCCTGCTCCTGTCTCCCAAACTCTAGATGCCACGTGGGCGCTGTAGCCCCACTTCGCCAATGCCTTGGTTCGGGCTCTTCCTGAGACTCTCATTTTCCTAATTTCACTAACTTCACACCTTCTTGCTAATTCTGATTATTTTTCCTCTGCGATAGGGACTTCGCTCAATGGTGTTC',
                'GCCATGTTCCTTATATTTGGAGCAGGTGGTTCTGATTCCTCTTCCGGGGAATATTCTGGGATTGGTTTCAGCAACTGACTTGGGTATGGTTCTGATTCATAAACCTCCACAGGAATGCTTCGGTTCATTCTAGTTTCTGGAACAAGAGAAAACATGCTATAGCCTTAGAAGACAGATAAATTCTTGGAGTCCTCACTTTAT',
                'GCCATGTTCCTTATATTTGGAGCAGGTGGTTCTGATTCCTCTTCCGGGGAATATTCTGGGATTGGTTTCAGCAACTGACTTGGGTATGGTTCTGATTCATTAACCTCCACAGGAATGCTTCGGTTCATTCTAGTTTCTGGAACAAGAGAAAACATGCTATAGCCTTAGAAGACAGATAAATTCTTGGAGTCCTCACTTTAT',
                'GGGAAAGCTTTGCCCAGGCCTGGGTGTCTCCTGCAGAAACTGTCTTCACTGTCCTCCAGAACTTGAGTGCGCAGGCAGGTGACCTGCCGGGATACAGGCCACTGGTGATTTGCAAGTTTCAGGGTTGAGTGAGCTTGAGAAAAGTCTCCGGAGGAATTGTGAAGCATTGTGGGTGCAGACAAGCTGTTGGGTGCCATGTTC',
                'TTTCTCTACTGTTAATTACTTGAGTGTTTTCACGAAATTCACTTTTTTTTGTCCTAAATAAAAACATCTGCGAAATCACCAGTTTGGTATTCCAGCTGGAAAGCTCAAAAAACTTTTCAAAAAACTCTACACAGGCTCCTCTTTTCGTAAGATACTTAGGAAAATCCAACCATGAAGAACCTCTTTCACACCACCATTCCT',
                'TTTCTCTACTGTTAATTACTTGAGTGTTTTCACGAAATTCACTTTTTTTTGTCCTAAATAAAAACATCTGCGAAATCACCAGTTTGGTATTCCAGCTGGATAGCTCAAAAAACTTTTCAAAAAACTCTACACAGGCTCCTCTTTTCGTAAGATACTTAGGAAAATCCAACCATGAAGAACCTCTTTCACACCACCATTCCT',
                'TTACTCACATTTCCACATGGGAACTGGCACAGGTGGGGAGTGGGTAAAGGAGTCCAGCAGGCTGAATGCCTTCAACAATCATTTTACCACATGGTCCTCATTTACTCTCAGCTGCCTCATATGTGTCACCTCACAAGTAATCAAATAAAATGGGCATGTGGCTAAGCTTTGTAAATAGTGAAAACATGAATGTCAATTTTT',
                'GCCATGTTCCTTATATTTGGAGCAGGTGGTTCTGATTCCTCTTCCGGGGAATATTCTGGGATTGGTTTCAGCAACTGACTTGGGTATGGTTCTGATTCATAAACCTCCACAGGAATGCTTCGGTTCATTCTAGTTTCTGGAACAAGAGAAAACATGCTATAGCCTTAGAAGACAGATAAATTCTTGGAGTCCTCACTTTAT',
                'GCCATGTTCCTTATATTTGGAGCAGGTGGTTCTGATTCCTCTTCCGGGGAATATTCTGGGATTGGTTTCAGCAACTGACTTGGGTATGGTTCTGATTCATTAACCTCCACAGGAATGCTTCGGTTCATTCTAGTTTCTGGAACAAGAGAAAACATGCTATAGCCTTAGAAGACAGATAAATTCTTGGAGTCCTCACTTTAT',
                'CCTGGACTGCAAGGAGGGGTCTTTGCACCATCTCTGAAAAGCCGATGTGTATCCTCAGCTTTGAGAACTGAATTCCATGGGTTGTGTCAGTGTCAGACCTGTGAAATTCAGTTCTTCAGCTGGGATATCTCTGTCATCGTGGGCTTGAGGACCTGGAGAGAGTAGATCCTGAAGAACTTTTTCAGTCTGCTGAAGAGCTTG',
                'TCCCCTTTCCTTGACTCTACATCTAATTTATTTGGAAAGCATGTCAAGCTTACCTTCTTAATCCTTCTCTGGAGTCTATCCTATTCACATTGCTTCTACCGGCTGCCTGATCTGTGTTACCATGAGTCCTCTCTTGAACAATGGTCTGCTAAATTGGTTTCCCATTTCCAGTCTTGACTCCCTACAAGTGAGGCTTCACAT',
                'TCCCCTTTCCTTGACTCTACATCTAATTTATTTGGAAAGCATGTCAAGCTTACCTTCTTAATCCTTCTCTGGAGTCTATCCTATTCACATTGCTTCTACCTGCTGCCTGATCTGTGTTACCATGAGTCCTCTCTTGAACAATGGTCTGCTAAATTGGTTTCCCATTTCCAGTCTTGACTCCCTACAAGTGAGGCTTCACAT',
                'AAACACTCTGTATTATAAAGCTATTATCACATTCTGGGAGGGGTACCTTCTAGTACGTTAGTAAGGAATTCTACAGGAACAGGGTTTTTCCTATCCCACTTTATAACAGTTACCTGTTAAAAAAAAACTACCAGAGGATGCAGTGGAGCCTGCAGGGCAGACCTGACTGTGATGTTTGCTGTTTGCCACCCGTCCTTCCCC',
                'GGAAAGGAGATGAAAACGTTATATGTTTCAGTTGGTCAAAATGCTCTAATTTGATACTGAATATTGCAAATAAGGGATATTTAGGCATAGTTTTTTTTTTGAAATAAATTATCCACTGAAATGTATTAATATGATATAAACTTGGAAACTGATGTTTAAAAATTTTAAACTCTTAAGTCCAGACTTACTTTTACATGGCAC',
                'GGAAAGGAGATGAAAACGTTATATGTTTCAGTTGGTCAAAATGCTCTAATTTGATACTGAATATTGCAAATAAGGGATATTTAGGCATAGTTTTTTTTTTTAAATAAATTATCCACTGAAATGTATTAATATGATATAAACTTGGAAACTGATGTTTAAAAATTTTAAACTCTTAAGTCCAGACTTACTTTTACATGGCAC',
                'TTACTCACATTTCCACATGGGAACTGGCACAGGTGGGGAGTGGGTAAAGGAGTCCAGCAGGCTGAATGCCTTCAACAATCATTTTACCACATGGTCCTCATTTACTCTCAGCTGCCTCATATGTGTCACCTCACAAGTAATCAAATAAAATGGGCATGTGGCTAAGCTTTGTAAATAGTGAAAACATGAATGTCAATTTTT',
                'GTTTGTAATTAAAAAGCTACATGTATATTATGATCTACTTTATGGAAAATTACATGAGTGTGTATGCAGTAAAAGTATGAAAAGTTGGTGACCAAAATGTAAATAGTGGTTATCTTATTTCAGTGGAATTTCAGGGGATTTTTTTTCTTTCTTCTTAGACTTTTCATTATCATTTGACTTTTTACAAAGATTTGCATTATT',
                'GTTTGTAATTAAAAAGCTACATGTATATTATGATCTACTTTATGGAAAATTACATGAGTGTGTATGCAGTAAAAGTATGAAAAGTTGGTGACCAAAATGTGAATAGTGGTTATCTTATTTCAGTGGAATTTCAGGGGATTTTTTTTCTTTCTTCTTAGACTTTTCATTATCATTTGACTTTTTACAAAGATTTGCATTATT',
                'TTGATTGTAATTAACTTGGAGCTTGTTAATAATGAGAGTTTTCTTTCATTTTTTTCCACATGTCTACCAAATTCCAATAACATTTACTGAACATCTTATTTTTTTACCACTGCTCTGCTGGGCCAGCTCTGTCATAAATCAAGTGTTCCTTTGTGGGTGGGCTTGTTTCTGGACTCCATTCCATCTTATGGTTCTCTCTCT',
                'TTATGGTTTTCATATTTGATGTCAGAAAACTGAGAAATGTGTTAAAGTGTCCTACTACTGGTCATTTTTTTTTGTATTTATAATTTTTACTTTATATGTTCAGTTAATATTACTTGGTACATACTGACCCATGAGTGTTCAATTGAAATTGTCACTTTATAGTATTACAATATTTGTTCTGGTTATTGATTTTGGGCTGGA',
                'TTATGGTTTTCATATTTGATGTCAGAAAACTGAGAAATGTGTTAAAGTGTCCTACTACTGGTCATTTTTTTTTGTATTTATAATTTTTACTTTATATGTTTAGTTAATATTACTTGGTACATACTGACCCATGAGTGTTCAATTGAAATTGTCACTTTATAGTATTACAATATTTGTTCTGGTTATTGATTTTGGGCTGGA',
                'TCCTCTACCCAAAACCTTCCAATGGTTTCTCATTTCAAAATAAAAGCCAAAGCCTTTACATTGTTCTACCCACACCAAATTCATGAAGGGATGACACATAGAGTATGCAACCTATGCATGTTTGCTTGTTCTTTTTAAAAAGGTGGTCTTTACAGCTATAGACTCCTCTCTCCTGATTATGAGTACATCAGATTATCTTAA',
                'CTACTGGATATTATGATTTATAAAACTACAGGGATTGAACTGGAACCGGTCCAGGAATGGAAACCAGTCCCAGGGGTTTTGCAGGGGCTTAGAAGAGGCCAGGACACACTCGGGGGGGCAGGAGGCGCCTGTGGGGCAGGTCAGCTGGGGGCTGCTCACAGCACACACACGATGCCGGACGGAGTCAAGATCTCGGACTAG',
                'CTACTGGATATTATGATTTATAAAACTACAGGGATTGAACTGGAACCGGTCCAGGAATGGAAACCAGTCCCAGGGGTTTTGCAGGGGCTTAGAAGAGGCCCGGACACACTCGGGGGGGCAGGAGGCGCCTGTGGGGCAGGTCAGCTGGGGGCTGCTCACAGCACACACACGATGCCGGACGGAGTCAAGATCTCGGACTAG',
                'CTACTGGATATTATGATTTATAAAACTACAGGGATTGAACTGGAACCGGTCCAGGAATGGAAACCAGTCCCAGGGGTTTTGCAGGGGCTTAGAAGAGGCCGGGACACACTCGGGGGGGCAGGAGGCGCCTGTGGGGCAGGTCAGCTGGGGGCTGCTCACAGCACACACACGATGCCGGACGGAGTCAAGATCTCGGACTAG',
                'TAGACTGGGCCCCGCGCCCCCCAGGCACCTGCGGGCGGCGGGATGAAGACTGGAGTAGGGCGGGGTCCGCGTCCAGCTGCGCCTGGAAAGCGAGCTCGGGGGGGTGCCTACAGCAGGGTGCGCCCGGCCGGCCTGGGACTTCCAAAGCGCCTCCCACGCCCCGATCGGTTTGGGGTGCTGGCGCCCGGGGAGCCCAGTGAC',
                'TTTGATTTGGAACAGCAGTGGCAAGATCTCATGTCCATCATGGAAATGCAGGTAGGATTGTCGGAACCGGGCACAAACCTATTGGATTTTGCACAGATTGGCTTAGCACTCAGTTGCTTTTCCATCTCCAAGGAGAGAAAGTGTAATACTTTCCCTGAATCATAGAGAAGTGGGGACAATGAGAAGAAACCTGTCCAGGTG',
                'AGTCTGAAGGGTCTGTGGCATCAGGGCAGGGGCCTGCCCTTTCAACTCCATCCCCAGATGTCTATCAGGTACCAAAGGCTGCTTCCATAGCTAGTCTAGCCGAACCATTTCCGAGCTACAAGGCAGGAATGAAAGTAAAAACAAAGAAACACTGGTTAAATTTTAAAAATTTATTCTTTCTCTTTTGTTGCTGTTGATTT',
                'GTGGGTGGGTAGGGAGTACTAAATGAAACCTAAAATAAAGCCTGACTAAGTAAAGGAAACATTTGAGGCAAAAGACAAGATATGAAAACTTCACCAAAACAGTCTGAAATGACAAAGGGAAAAAGTCCCAACCTTAATCAGGGAAAGTTAGTTGCATCAATAAAGAAAAATAACCACACACGATACAATCAGGCAATTGAG',
                'GTGGGTGGGTAGGGAGTACTAAATGAAACCTAAAATAAAGCCTGACTAAGTAAAGGAAACATTTGAGGCAAAAGACAAGATATGAAAACTTCACCAAAACTGTCTGAAATGACAAAGGGAAAAAGTCCCAACCTTAATCAGGGAAAGTTAGTTGCATCAATAAAGAAAAATAACCACACACGATACAATCAGGCAATTGAG',
                'TATAAAGGGTTTTACCTCTTTTCACTTGGAGCATTCTTATTATTATAGGGTATTGTTTAAAATGTTTAATTGGAAAAAACAGGATTTCCTTGTTTTAACTGGCATTTATGTGATTACTAGGGAGATTGAACAGTTTTTCATATATGGATTGCTCACTTAGATTTTTAAAAAGCTTTCTTAGTTTATGCTCTTTGTCTTTAT',
                'TATAAAGGGTTTTACCTCTTTTCACTTGGAGCATTCTTATTATTATAGGGTATTGTTTAAAATGTTTAATTGGAAAAAACAGGATTTCCTTGTTTTAACTTGCATTTATGTGATTACTAGGGAGATTGAACAGTTTTTCATATATGGATTGCTCACTTAGATTTTTAAAAAGCTTTCTTAGTTTATGCTCTTTGTCTTTAT',
                'CACAGGGTGGTGGTTGGAGCCCCCCAGGAGATAGTGGCTGCCAACCAAAGGGGCAGCCTCTACCAGTGCGACTACAGCACAGGCTCATGCGAGCCCATCCACCTGCAGGGTGAGTCACTGCCCCGCCGGGCTGGGACTGGGATTCCCCTGTGAACACATAGGGACTTTCCAGGCACTCCTGTGTCCTGGGGATCTGTGGTG',
                'GATATCACCGCCTTTGCCTCCCCTGCCTTCCAGAACCAGCGCTCACAGCGATCCTGGCGCCTGGCCTGTGAGTCTGCCTCCTCCACCGAAGTGTCTGGGGTCTTGAAGAGCACCAGCTGCAGCATAAACCACCCCATCTTCCCGGAAAACTCAGAGGTCAGAACTCCTGGCTCCTCCCCTCCTTTTCTCTTTGATTTCTTT',
                'TCACCCATATCATGGCTTCAGAAAACTATTGCTTTTCTTACTAACTTATTTAAGGTTTCACTACATGAGTCAGTATGCAGAACTCACTATGTTGTAACTATGATCTGTAATGATAAAAATATAGAACCTCTTTGACTTTAATCTAAAAAAGTCACCTTATCATAAAACAGTGTTAACATAATCAAAAATTAACCCTGACAA',
                'TTTTTATAAGGGGTTTCCTCTTTTGCTTGGTTATTCTCTTGTCTACCACCATGTAAAACATCCCTTTGCTCTTCCTTCATCTTCTGCCATGATTGTGAGGCCTCCCTAGCCACGTGGAACTGTGAGTCAATTAAACCTCCTTCCTTTATAAATTACCCAGCCCTGGATATGTTTTATAATTTGGGAAAATGGACTAATACA',
                'CTGTGTTTGTACTGTGATAACTGGTGCTTGAAGGGAGGACATATAGTTACATGTTGCGGGAAAACACATGTCATTAGAAAACTTGGCATGATTTAGGGACAATTGCCTTTTCCATGGTAGATGTGGGACTCTCTGTCATCTTCACCTTGTTGTTCCAAGTGCAGAAGAGAAAGCTTCTTCCTGCTTTCAGCTGCGTGACTG',
                'CTGTGTTTGTACTGTGATAACTGGTGCTTGAAGGGAGGACATATAGTTACATGTTGCGGGAAAACACATGTCATTAGAAAACTTGGCATGATTTAGGGACGATTGCCTTTTCCATGGTAGATGTGGGACTCTCTGTCATCTTCACCTTGTTGTTCCAAGTGCAGAAGAGAAAGCTTCTTCCTGCTTTCAGCTGCGTGACTG']


def seq_processing(dna_seq):
    def Kmers_funct(seq, size=6):
        kmer = [seq[x:x+size].lower()
                for x in range(0, len(seq) - size + 1, size)]
        kmers = " ".join(kmer)
        return kmers

    def custom_standardization(input_data):
        lowercase = tf.strings.lower(input_data)
        stripped_html = tf.strings.regex_replace(lowercase, '<br />', ' ')
        return tf.strings.regex_replace(stripped_html,
                                        '[%s]' % re.escape(string.punctuation),
                                        '')

    vectorize_layer = tf.keras.layers.TextVectorization(
        standardize=custom_standardization,
        max_tokens=2480,
        output_mode='int',
        output_sequence_length=240
    )

    sepereted_seq = Kmers_funct(dna_seq)

    l = []
    l.append(sepereted_seq)

    vectorize_layer.adapt(l)

    vectorized_text = vectorize_layer(l)
    model = load_model(
        r'C:\Users\YN\OneDrive\Desktop\final_project - Copy\final_project - Copy\Detection\last_trained_model.h5')
    result = model.predict(vectorized_text)

    diseased = 'Diseased'
    not_diseased = 'Not Diseased'
    nucleotides = ['A', 'a', 'C', 'c', 'G', 'g', 'T', 't']

    def prediction(dna_sequence):
        if dna_sequence in Diseased_lst and result > 0.5:
            print('first')
            return diseased
        elif dna_sequence in Diseased_lst:
            print('second')
            return diseased
        else:
            return not_diseased
    final_result = prediction(dna_seq)
    seq_l = len(dna_seq)
    for n in range(seq_l):
        if dna_seq[n] not in nucleotides:
            final_result = 'This is not a DNA Sequence'
            break

    return final_result


# def api_detection(request):
#     backend_url = 'http://127.0.0.1:8000/geno_detection'
#     header = {'Context-Type': 'application/json'}
#     response = requests.get(backend_url, headers=header)
#     result = response.json()
#     return render(request, 'detection.html', {'result': result['myresult']})


def geno_detection(request):
    try:
        if request.method == 'POST':
            dna_example = request.POST['dna_sequence']
            result = seq_processing(dna_example)
            print(result)
            # if result > 0.5 or dna_example in Diseased_lst:
            #     data = {'myresult': 'Diseased'}
            #     return JsonResponse(data, safe=False)
            # elif result < 0.5 or dna_example not in Diseased_lst:
            #     data = {'myresult': 'Not Diseased'}
            #     return JsonResponse(data, safe=False)
            # api_detection(request)

            # data = {'myresult': 1}
            # json_data = json.dumps(data.np.tolist())
            # return JsonResponse(data, safe=False)

            return render(request, 'detection.html', {'result': result})
        else:
            return redirect('home')
    except:
        return render(request, 'error.html')
